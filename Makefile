# Makefile for the TranscriberApp project

# --- Configuration ---
# Use 'python3' or specific version if needed, ensure it matches your venv
PYTHON_INTERPRETER ?= python3.11
# Define database filename used by clean-db target
DB_FILE ?= llm_training_data.db

# --- Phony Targets (targets that don't represent files) ---
.PHONY: all install clean clean-build clean-pyc clean-db run-cli run-web freeze lint format check generate-config help

# Default target (executed when running just 'make')
all: help

# --- Installation ---
install: requirements.txt ## Install/update Python dependencies from requirements.txt
	@echo "Ensuring pip is up-to-date..."
	$(PYTHON_INTERPRETER) -m pip install --upgrade pip
	@echo "Installing dependencies from requirements.txt..."
	$(PYTHON_INTERPRETER) -m pip install -r requirements.txt
	@echo "âœ… Dependencies installed/updated."

# --- Running the Application ---
run-cli: ## Run the command-line interface (use ARGS="..." for arguments)
	@echo "Starting CLI application..."
	@echo "Command: $(PYTHON_INTERPRETER) -m src $(ARGS)"
	$(PYTHON_INTERPRETER) -m src $(ARGS)

run-web: ## Run the Flask web server (development mode via app.py)
	@echo "Starting Flask development server (use Ctrl+C to stop)..."
	@echo "Command: $(PYTHON_INTERPRETER) app.py"
	$(PYTHON_INTERPRETER) app.py

# --- Dependency Management ---
freeze: ## Update requirements.txt with current environment packages
	@echo "Updating requirements.txt with packages from current environment..."
	$(PYTHON_INTERPRETER) -m pip freeze > requirements.txt
	@echo "âœ… requirements.txt updated."

# --- Code Quality & Formatting (using Ruff) ---
# Ensure 'ruff' is installed (via requirements.txt)
lint: ## Check code style and quality with Ruff (attempts fixes)
	@echo "Running Ruff linter (with --fix)..."
	$(PYTHON_INTERPRETER) -m ruff check . --fix
	@echo "Linting complete."

format: ## Format code automatically with Ruff
	@echo "Running Ruff formatter..."
	$(PYTHON_INTERPRETER) -m ruff format .
	@echo "Formatting complete."

check: lint ## Alias for lint target

# --- Cleaning Tasks ---
clean: clean-build clean-pyc clean-db ## Run all cleaning tasks
	@echo "ðŸ§¹ Full project cleanup complete."

clean-build: ## Remove build artifacts (dist, build, eggs)
	@echo "Removing build artifacts..."
	rm -rf build/ dist/ .eggs/
	find . -depth -name '*.egg-info' -exec rm -rf {} +
	find . -depth -name '*.egg' -exec rm -f {} +

clean-pyc: ## Remove Python file artifacts (__pycache__, .pyc) and temp files
	@echo "Removing Python file artifacts and temporary files..."
	find . -depth \( -name '*.pyc' -o -name '*.pyo' -o -name '*~' \) -exec rm -f {} +
	find . -depth -name '__pycache__' -exec rm -rf {} +
	rm -f .coverage # Remove coverage reports if any
	# Updated pattern for temporary WAV files generated by transcriber.py
	# Matches filenames like 'input__abcdef12_temp.wav'
	rm -f audio/*__????????_temp.wav
	@echo "Python artifacts, cache, and temp WAVs cleared."

clean-db: ## Remove the SQLite database file
	@echo "Removing database file: $(DB_FILE)..."
	rm -f $(DB_FILE)
	@echo "Database file removed."

# --- Configuration Generation ---
generate-config: ## Generate config.yaml from schema (overwrites if run directly)
	@echo "Generating default config.yaml from schema..."
	# Execute the generation script as a module
	$(PYTHON_INTERPRETER) -m src.utils.generate_config_from_schema --overwrite # Example: Add --overwrite flag if needed
	@echo "config.yaml generated/updated."


# --- Help ---
# Parses comments starting with ## to generate help text
help: ## Show this help message
	@echo "Available Make targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' | \
		sort

# --- End of Makefile ---